// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: unistream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UnistreamService_SendMessage_FullMethodName = "/unistream.unistreamService/SendMessage"
)

// UnistreamServiceClient is the client API for UnistreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnistreamServiceClient interface {
	SendMessage(ctx context.Context, in *UniStreamRequest, opts ...grpc.CallOption) (UnistreamService_SendMessageClient, error)
}

type unistreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnistreamServiceClient(cc grpc.ClientConnInterface) UnistreamServiceClient {
	return &unistreamServiceClient{cc}
}

func (c *unistreamServiceClient) SendMessage(ctx context.Context, in *UniStreamRequest, opts ...grpc.CallOption) (UnistreamService_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &UnistreamService_ServiceDesc.Streams[0], UnistreamService_SendMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &unistreamServiceSendMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UnistreamService_SendMessageClient interface {
	Recv() (*UniStreamResponse, error)
	grpc.ClientStream
}

type unistreamServiceSendMessageClient struct {
	grpc.ClientStream
}

func (x *unistreamServiceSendMessageClient) Recv() (*UniStreamResponse, error) {
	m := new(UniStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UnistreamServiceServer is the server API for UnistreamService service.
// All implementations must embed UnimplementedUnistreamServiceServer
// for forward compatibility
type UnistreamServiceServer interface {
	SendMessage(*UniStreamRequest, UnistreamService_SendMessageServer) error
	mustEmbedUnimplementedUnistreamServiceServer()
}

// UnimplementedUnistreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUnistreamServiceServer struct {
}

func (UnimplementedUnistreamServiceServer) SendMessage(*UniStreamRequest, UnistreamService_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedUnistreamServiceServer) mustEmbedUnimplementedUnistreamServiceServer() {}

// UnsafeUnistreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnistreamServiceServer will
// result in compilation errors.
type UnsafeUnistreamServiceServer interface {
	mustEmbedUnimplementedUnistreamServiceServer()
}

func RegisterUnistreamServiceServer(s grpc.ServiceRegistrar, srv UnistreamServiceServer) {
	s.RegisterService(&UnistreamService_ServiceDesc, srv)
}

func _UnistreamService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UniStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UnistreamServiceServer).SendMessage(m, &unistreamServiceSendMessageServer{stream})
}

type UnistreamService_SendMessageServer interface {
	Send(*UniStreamResponse) error
	grpc.ServerStream
}

type unistreamServiceSendMessageServer struct {
	grpc.ServerStream
}

func (x *unistreamServiceSendMessageServer) Send(m *UniStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UnistreamService_ServiceDesc is the grpc.ServiceDesc for UnistreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnistreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unistream.unistreamService",
	HandlerType: (*UnistreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _UnistreamService_SendMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "unistream.proto",
}
